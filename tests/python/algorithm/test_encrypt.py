import re
import pytest

from gsm_data_generator.algorithm import DependentDataGenerator


@pytest.mark.parametrize(
    "imsi",
    [
        "123456789012345",
        "310150123456789",
        "460001234567890",
        "724999123456789",
        "262071234567890",
        "505021234567890",
        "208201234567890",
        "440101234567890",
        "234151234567890",
        "404451234567890",
    ],
)
def test_calculate_acc(imsi):
    acc = DependentDataGenerator.calculate_acc(imsi)

    assert isinstance(acc, str), f"ACC must be str for IMSI {imsi}"
    assert len(acc) == 4, f"ACC must be 4 hex chars for IMSI {imsi}"
    assert re.fullmatch(
        r"[0-9a-f]+", acc
    ), f"ACC must be lowercase hex for IMSI {imsi}: {acc}"


test_vectors = [
    (
        "7762AD5BFABE4E189A06AA534C27C28F",
        "B9AFD4DEB8DABD4979DF485AD9B5CCD2",
        "3CE7B58AFA24D28EF644397DA92ECE36",
        "5C9E1D11B4923D85BA08D333EABF7E2D",
        "E881D500613657A970AC7FECCF09ACF2",
    ),
    (
        "1DAD3010782F403DB3355AC40ABE9343",
        "F84430F67A129591CCAF40AB44A3C357",
        "9898966C02C7EE70FC9E8C807F37D442",
        "79925E138AEBF5D65C6C49AAD6592F19",
        "800708A4B569DF12C3A5427084883392",
    ),
    (
        "111682ABDBEE4618B300C77142BB34E3",
        "BF7B6313533A12C88E39FAA58F872E7A",
        "E9D66BD05C3E24FD4978FEFAD0EEE21E",
        "55CF2BB76463A92934E12D7516E5226E",
        "81AE1365374BF2E38AE8C6DFBDA84FCC",
    ),
    (
        "FD231C0D256A4CA0B35A615C711F366C",
        "2FE1E7B0CCBBC584421C0DDAB85B6B88",
        "72B2CD05052A6B4C26C3B3B98AC28912",
        "B5836881A2E125F4B637ADDDED4717D4",
        "C89373B03BA0193F95E86211C0BFEDCF",
    ),
    (
        "2D30811A1E74484688A7AFC2D818D553",
        "3DC86F6D09B8B64247206378F451AB3A",
        "4A646085A96B49E3A17B72E24FF46350",
        "92778989652D31870EF0C2526BB1BB2D",
        "101C7A3FC923395E959A940E6A57800E",
    ),
    (
        "51FFDFB2F15C4DB7A080C6C1781792D5",
        "9583BD70178705BED2BAC239ECDEBADC",
        "6FC169107CEDEC81E02151104055D081",
        "927F89F2CB8FFE1F4DE3D13BAA569941",
        "1EDD0600EA018FF809D6BB5FDD583969",
    ),
    (
        "549330CC1FCA4A488E4D1F34FC335ECC",
        "EB015B739EFF6C086618A798EB9A36F5",
        "BC583EA39F08C1483DA73EEC9272C0D3",
        "13F117C6C17CA8EEDEAEB297DC5A570C",
        "D9045A914EDF61210B94EC166E8D9A94",
    ),
    (
        "13D098496569471B838AB9DF8DB014A1",
        "0CB016549813AEB2B8FAB02512A28734",
        "F92A3310296E47FFD2A2EF2B8003335C",
        "1C0E4272F30770A620C6A78592455E34",
        "3ADD69B191A5BB0A61BBBA4AE04357B0",
    ),
    (
        "ADE93B3694F94F7BAC544288F1B4B4B2",
        "48DF6181A473B15D8701C7647E84B3CE",
        "2CC2B1F032A0C9F7EF12BBE111548FBC",
        "C4386B8F1E7E39F4D37199ABCCBC233D",
        "5CB63204ADA1AE260887C8726A339456",
    ),
    (
        "9C315075A9C04293B9CFAC81A69251FF",
        "D76ADB268F379B519EBF2E4E06383033",
        "62331CEE1E35FCD1335A70C5D1382F90",
        "B5EEE82B33B54D245DEB74B5C75B796D",
        "10B128A09CFB056C819A3929CAED70D6",
    ),
]

test_vectors_64 = [
    (
        "202DE24E913748FEBD685ED15CA69DD6",
        "9DAC5DCB273557F21B46B9EE8802E92C",
        "E6E267A75793A69C60011A23A46FB5F3132F48672122CAF415FF97F12C2CDDAC",
        "FFAB94CB0C27197E8407DB03B7794A44",
        "7DA243D3ACDE3E6EB97085E027A72F0B",
    ),
    (
        "4850EA05B4EB4D868DE36F1D48D7837B",
        "9A88A8F36386FC0B6221EA976D3DEFAD",
        "3C3B2D407857DC68F65F859F255B00B313B76ECE84FA2747B75944063701CE19",
        "EC47CEA31DD79843B243E99B46AF3F40",
        "90CFBA1D5C0CF125E883996DC4495D53",
    ),
    (
        "B51DB69F30FC47B981B42ADE2004171D",
        "CC4B13C7C98D0A1C2832E39AA7F97941",
        "811706F8802E115A22863DEC3808783AC01BC8D7F92F8D200D267A72490A8F1C",
        "51C5153700FA68881A24DD1BAF303BF9",
        "7DAC6BBC7C4FF94A7C3EFBC752D96CE5",
    ),
    (
        "1D40F7DD19894563AD6FB50CD4A0CC05",
        "7E21DE7CB6FD1E28D3BF1A5F67791E59",
        "B5FBE43EF54267B52D2B834FED8A3B4DE36FC9BADAE2BBC7F81A0A6FDF5659EF",
        "7C13E3C97256B4D4B60519EAB490059E",
        "3652600DBAF9AE368B9395CE3F5F94F0",
    ),
    (
        "AD9655CEFD3A4A64A681224B7F4FAD73",
        "E0793B4809F28BFA40F2EC6F6B0C0B17",
        "F6D02AEC76D2E57AAE5B75B01A3DD5BB7913E78EB7509561C2FC9355FD761C61",
        "C209377264A6CBDB872CD5CA7036100C",
        "04C8E1AA965CD0570CFCFC7BE2D654E8",
    ),
    (
        "9DEAEF950E8E46A09A118B7B65D2E185",
        "76AF0A6EA983470CBD5518DD93B21841",
        "EE24EA029D81D1EEC1113E98838CE6AC4931A8C7000906FB9039CAFE917C6ED1",
        "57CC39DF3A5CF9F6B66AEBBA845944C3",
        "4F4A6CC501EAD4349BFE672360142934",
    ),
    (
        "5A484C2B08284554B5A8A6DDD99F2F88",
        "9CBA735C5559D223BB62097CD1538E4C",
        "25C5DE200C5B622A7A4F7B3BC4BA9AD513340D22FD580AE246DCB2893B32C1A2",
        "689A0D2867F69A1F00F98A675D13527F",
        "9BB5D62FA0525A37D245798044CD98FD",
    ),
    (
        "468B486B0F9144FF8656B7E5FFD74B19",
        "566BF33A69BC9EF39229EDB02F3E0370",
        "940F5ABF80BD350B05CDD827ED4A3D865584CB7356E18B2D0E6889771DA02FF3",
        "2570FC9FF0E2CC75826DBEBDD4D2EFF2",
        "A861B0FDCBF7EBF30EF9EB8389F9E606",
    ),
    (
        "D7B6CA09BD3E410684F25006E17D117F",
        "0854E7B2414D77ABE972F065CF157A4D",
        "1DDC863D9BE16F105A5FF2AA77F9968783536FDA2EBB272FBEC43055BAC8A2A4",
        "4FFB8CA95C06FC3EBAA911AFCBCB9CE9",
        "FCDA3F55C79B01854C4BD2D783B61611",
    ),
    (
        "5362203230344C06B017E964396AAB42",
        "40342DE81299957BB488EAF0FFA0D54E",
        "C3EC2FB1B88B3350BBB10F51F6288864B40E2F437FA51BD86FCF8C566556CA7F",
        "7E0E396F0839AE6A8EEE720E4FE8CCEF",
        "64DF2024639DCA1226C81B444B0BF731",
    ),
]


@pytest.mark.parametrize("ki, op, transport, expected_opc, expected_eki", test_vectors)
def test_opc_and_eki_generation(ki, op, transport, expected_opc, expected_eki):
    """Validate OPC and eKI calculation with real known-good vectors."""

    opc = DependentDataGenerator.calculate_opc(op, ki)
    eki = DependentDataGenerator.calculate_eki(transport, ki)

    assert opc.upper() == expected_opc.upper()
    assert eki.upper() == expected_eki.upper()


@pytest.mark.parametrize(
    "ki, op, transport, expected_opc, expected_eki", test_vectors_64
)
def test_opc_and_eki_generation_64(ki, op, transport, expected_opc, expected_eki):
    """Validate OPC and eKI calculation with real known-good vectors."""

    opc = DependentDataGenerator.calculate_opc(op, ki)
    eki = DependentDataGenerator.calculate_eki(transport, ki)

    assert opc.upper() == expected_opc.upper()
    assert eki.upper() == expected_eki.upper()
