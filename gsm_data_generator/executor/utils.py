"""
STC_APP_Scriptv6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nz_MGqPs5z1rz_G6NBl8xH-dQJxeK1Z3 : Private
    Author : Hamza Qureshi

DESCRIPTION
This code include following :
1. Create demo data dynamic method
2. Generate all parameters added by user from Application/settings.json[Working Fine]
3. Get input file
4. Create output CSV or Text files [data, laser and server files] as well
"""

# !pip install pycryptodome
# you can use requirements.txt

# from core.GlobalParams import PARAMETERS, DATA_FRAMES

# Standard library imports
import binascii
import collections
import datetime
import json
import os
import random
import secrets
import string
import time
import uuid

# Third-party imports
import pandas as pd
from Crypto.Cipher import AES
from io import BytesIO

# Typing imports
from typing import Any, Dict, List, Optional, Tuple

# Project-specific imports
from ..generator import CryptoUtils, DataFrameProcessor, DataGenerator, DataProcessing

# from core.generator.utils import (
#     CryptoUtils,
#     DataFrameProcessor,
#     DataGenerator,
#     DataProcessing,
# )

# from globals.parameters import DataFrames, Parameters
from ..globals import DataFrames, Parameters

# from pydantic import BaseModel, Field


default_headers = (
    "ICCID",
    "IMSI",
    "OP",
    "K4",
    "PIN1",
    "PUK1",
    "PIN2",
    "PUK2",
    "KI",
    "EKI",
    "OPC",
    "ADM1",
    "ADM6",
    "ACC",
    "KIC1",
    "KID1",
    "KIK1",
    "KIC2",
    "KID2",
    "KIK2",
    "KIC3",
    "KID3",
    "KIK3",
)


def list_2_dict(list: list) -> dict:
    dict = {}
    for index in range(0, len(list)):
        dict[str(index)] = [list[index], "Normal", "0-31"]
    return dict


def dict_2_list(d: dict) -> list:
    list1 = []
    for index, j in enumerate(d):
        temp = list(d.values())[index][0]
        list1.append(temp)
    return list1


# # m_zong = ZongGenerateHandle()

# # m_zong.set_json_to_UI()
# # m_zong.Generate_laser_file("AAA",s.dataframes.GRAPH_DF)
# # m_zong.Generate_servr_file("ASD",s.dataframes.SERVR_DF)
# # m_zong.Generate_elect_file("ASD",s.dataframes.ELECT_DF)


def read_json(file_path: str):
    try:
        with open(file_path, "r") as json_file:
            data = json.load(json_file)
        return dict(data)
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return None  # You can choose to return None or raise a custom exception here
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON in '{file_path}': {e}")
        return None  # You can choose to return None or raise a custom exception here


def copy_function(x):
    return str(x)


__all__ = [
    "default_headers",
    "list_2_dict",
    "dict_2_list",
    "read_json",
    "copy_function",
]
